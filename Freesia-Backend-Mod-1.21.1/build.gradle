plugins {
    id 'java'
    id 'maven-publish'
    id 'architectury-plugin' version "${architectury_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
    id 'com.gradleup.shadow' version "${shadow_plugin_version}" apply false
}

def root = project(':Freesia-Backend-Mod-1.21.1')

base {
    archivesName = root.archive_base_name
}

architectury {
    common(root.enabled_platforms.split(','))
}

loom {
    accessWidenerPath = file('src/main/resources/freesia_backend.accesswidener')

    runConfigs.configureEach {
        ideConfigGenerated = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${root.fabric_loader_version}"
}

sourceSets {
    main {
        resources {
            srcDir file('src/generated/resources')
            if (providers.gradleProperty('MOD_DEVELOPMENT').present) {
                srcDir file('src/test/resources')
            }
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'

    group = root.maven_group
    version = "${root.mod_version}+mc${root.minecraft_version}"

    architectury {
        minecraft = root.minecraft_version
    }

    loom {
        silentMojangMappingsLicense()

        interfaceInjection {
            enableDependencyInterfaceInjection = true
        }
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'Mod Menu'
            url = 'https://maven.terraformersmc.com/releases'
        }

        maven {
            name = 'Modrinth'
            url = 'https://api.modrinth.com/maven'
        }

        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases/'
        }

        mavenCentral()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${root.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${root.parchment_minecraft_version}:${root.parchment_version}@zip")
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.release = 21
    }

    java {
        withSourcesJar()
    }

    jar {
        from('LICENSE') {
            rename { "${it}_${root.archivesBaseName}" }
        }
    }

    processResources {
        var resourcesToReplace = [
                'pack.mcmeta',
                'META-INF/mods.toml',
                'META-INF/neoforge.mods.toml',
                'fabric.mod.json'
        ]

        var replaceTokens = [
                mod_id                        : root.mod_id,
                mod_version                   : root.mod_version,

                minecraft_version             : root.minecraft_version,
                fabric_loader_version         : root.fabric_loader_version,
                fabric_api_version            : root.fabric_api_version,

                fabric_minecraft_version_range: root.fabric_minecraft_version_range,
                fabric_loader_version_range   : root.fabric_loader_version_range,
                fabric_api_version_range      : root.fabric_api_version_range,
        ]

        inputs.properties replaceTokens
        filteringCharset 'UTF-8'

        filesMatching(resourcesToReplace) {
            expand replaceTokens
        }
    }

    publishing {
        repositories {
            mavenLocal()
        }

        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}

subprojects {
    apply plugin: 'com.gradleup.shadow'

    base {
        archivesName = "$root.archive_base_name-$project.name"
    }

    loom {
        accessWidenerPath = root.loom.accessWidenerPath

        runs {
            client {
                client()

                runDir 'run/client'

                // To support the Enhanced Class Redefinition in JBR.
                vmArg '-XX:+IgnoreUnrecognizedVMOptions'
                vmArg '-XX:+AllowEnhancedClassRedefinition'

                // https://openjdk.org/jeps/400
                property 'file.encoding', 'COMPAT'
            }

            server {
                server()
                runDir 'run/server'
                vmArg '-XX:+IgnoreUnrecognizedVMOptions'
                vmArg '-XX:+AllowEnhancedClassRedefinition'
                property 'file.encoding', 'COMPAT'
            }
        }
    }

    configurations {
        common {
            canBeResolved = true
            canBeConsumed = false
        }

        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common
        developmentFabric.extendsFrom common

        shadowBundle {
            canBeResolved = true
            canBeConsumed = false
        }
    }

    dependencies {
    }

    shadowJar {
        exclude 'architectury.common.json'
        configurations = [project.configurations.shadowBundle]
        archiveClassifier = 'dev-shadow'
    }

    remapJar {
        input.set shadowJar.archiveFile
    }

    sourcesJar {
        def commonSources = root.sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    }

    components.java {
        withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
            skip()
        }
    }
}
